name: Build MLC-LLM Android AAR (arm64-v8a)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  ANDROID_NDK_VERSION: r25b
  GRADLE_VERSION: 7.6.2
  JAVA_VERSION: 17
  CMAKE_VERSION: 3.22.1
  PACKAGE_NAME: com.gem.app.mlc

jobs:
  build-aar:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Android NDK
      id: cache-ndk
      uses: actions/cache@v4
      with:
        path: /usr/local/android-ndk
        key: android-ndk-${{ env.ANDROID_NDK_VERSION }}-linux
        restore-keys: |
          android-ndk-${{ env.ANDROID_NDK_VERSION }}-

    - name: Cache Gradle
      id: cache-gradle
      uses: actions/cache@v4
      with:
        path: /usr/local/gradle-${{ env.GRADLE_VERSION }}
        key: gradle-${{ env.GRADLE_VERSION }}-linux
        restore-keys: |
          gradle-${{ env.GRADLE_VERSION }}-

    - name: Cache MLC-LLM repository
      id: cache-mlc
      uses: actions/cache@v4
      with:
        path: mlc-llm
        key: mlc-llm-${{ hashFiles('**/mlc-llm/.git/refs/heads/main') }}
        restore-keys: |
          mlc-llm-

    - name: Install system dependencies
      run: |
        # Enable universe repository for libncurses5
        sudo add-apt-repository universe -y
        sudo apt-get update -qq
        
        # Install packages with fallback options
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
          git \
          unzip \
          wget \
          curl \
          cmake \
          build-essential \
          zip \
          zlib1g-dev \
          libstdc++6 \
          locales \
          ninja-build \
          python3 \
          python3-pip \
          pkg-config \
          libssl-dev \
          libffi-dev \
          libbz2-dev \
          libreadline-dev \
          libsqlite3-dev \
          llvm \
          xz-utils \
          tk-dev
        
        # Try to install ncurses packages with multiple options
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
          libncurses5-dev libncursesw5-dev || \
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
          libncurses-dev libncursesw-dev
        
        # Install ncurses5 library if available, otherwise use ncurses6
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
          libncurses5 libtinfo5 || \
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
          libncurses6 libtinfo6
        
        # Install additional tinfo dev packages
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
          libtinfo-dev || echo "libtinfo-dev not available, continuing..."
        
        echo "✅ All dependencies installed successfully"

    - name: Download and setup Android NDK
      if: steps.cache-ndk.outputs.cache-hit != 'true'
      run: |
        echo "Downloading Android NDK ${{ env.ANDROID_NDK_VERSION }}..."
        wget -q --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 3 \
          https://dl.google.com/android/repository/android-ndk-${{ env.ANDROID_NDK_VERSION }}-linux.zip -O ndk.zip
        echo "Extracting NDK..."
        sudo unzip -q ndk.zip -d /usr/local/
        sudo mv /usr/local/android-ndk-${{ env.ANDROID_NDK_VERSION }} /usr/local/android-ndk
        sudo chmod -R 755 /usr/local/android-ndk
        echo "NDK setup complete"
        ls -la /usr/local/android-ndk/

    - name: Download and setup Gradle
      if: steps.cache-gradle.outputs.cache-hit != 'true'
      run: |
        echo "Downloading Gradle ${{ env.GRADLE_VERSION }}..."
        wget -q --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 3 \
          https://services.gradle.org/distributions/gradle-${{ env.GRADLE_VERSION }}-bin.zip -O gradle.zip
        echo "Extracting Gradle..."
        sudo unzip -q gradle.zip -d /usr/local/
        sudo chmod -R 755 /usr/local/gradle-${{ env.GRADLE_VERSION }}
        echo "Gradle setup complete"
        /usr/local/gradle-${{ env.GRADLE_VERSION }}/bin/gradle --version

    - name: Set environment variables
      run: |
        echo "Setting up environment variables..."
        echo "ANDROID_NDK_ROOT=/usr/local/android-ndk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=/usr/local/android-sdk" >> $GITHUB_ENV
        echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
        echo "/usr/local/android-ndk" >> $GITHUB_PATH
        echo "/usr/local/gradle-${{ env.GRADLE_VERSION }}/bin" >> $GITHUB_PATH
        
        # Set up Rust/Cargo environment for Android cross-compilation
        echo "CC_aarch64_linux_android=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang" >> $GITHUB_ENV
        echo "CXX_aarch64_linux_android=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang++" >> $GITHUB_ENV
        echo "AR_aarch64_linux_android=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
        echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang" >> $GITHUB_ENV
        
        # Verify environment setup
        echo "Environment variables set:"
        echo "JAVA_HOME: $JAVA_HOME"
        java -version
        
        # Create Android SDK directory if it doesn't exist
        sudo mkdir -p /usr/local/android-sdk
        
        # Verify NDK is accessible
        if [ -d "/usr/local/android-ndk" ]; then
          echo "✅ Android NDK found at /usr/local/android-ndk"
          ls -la /usr/local/android-ndk/build/cmake/
          
          # Verify NDK toolchain
          if [ -f "/usr/local/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang" ]; then
            echo "✅ Android NDK toolchain found"
          else
            echo "❌ Android NDK toolchain not found"
            ls -la /usr/local/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/ | head -10
          fi
        else
          echo "❌ Android NDK not found!"
          exit 1
        fi

    - name: Clone MLC-LLM repository
      run: |
        echo "Cloning MLC-LLM repository..."
        if [ ! -d "mlc-llm" ]; then
          git clone --depth 1 --recursive https://github.com/mlc-ai/mlc-llm.git
        else
          echo "MLC-LLM directory already exists, pulling latest changes..."
          cd mlc-llm && git pull && cd ..
        fi
        
        echo "Repository structure:"
        ls -la mlc-llm/
        
        # Check for required CMakeLists.txt
        if [ -f "mlc-llm/CMakeLists.txt" ]; then
          echo "✅ CMakeLists.txt found"
        else
          echo "❌ CMakeLists.txt not found!"
          exit 1
        fi

    - name: Create Android build directory
      run: |
        cd mlc-llm
        echo "Creating Android build directory..."
        mkdir -p android_build
        
        # Verify build environment
        echo "Build environment check:"
        echo "CMake version: $(cmake --version | head -1)"
        echo "Ninja version: $(ninja --version)"
        echo "NDK root: $ANDROID_NDK_ROOT"
        echo "Java home: $JAVA_HOME"
        
        # Check submodules
        echo "Initializing and updating submodules..."
        git submodule update --init --recursive || echo "Warning: Submodule update failed, continuing..."

    - name: Configure CMake for Android
      run: |
        cd mlc-llm/android_build
        echo "Configuring CMake for Android arm64-v8a build..."
        
        # Verify NDK toolchain file exists
        if [ ! -f "$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake" ]; then
          echo "❌ Android toolchain file not found at: $ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake"
          echo "Available files in NDK build/cmake:"
          ls -la $ANDROID_NDK_ROOT/build/cmake/ || echo "Directory not found"
          exit 1
        fi
        
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_PLATFORM=android-29 \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=ON \
          -DMLC_ENABLE_INT4=ON \
          -DMLC_ENABLE_INT8=ON \
          -DMLC_ENABLE_NF4=ON \
          -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=BOTH \
          -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=BOTH \
          -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=BOTH \
          -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
          -GNinja || {
            echo "❌ CMake configuration failed!"
            echo "CMake output above shows the error details"
            exit 1
          }
        
        echo "✅ CMake configuration successful!"

    - name: Build MLC-LLM native library
      run: |
        cd mlc-llm/android_build
        echo "Building MLC-LLM native library for arm64-v8a..."
        
        # First, let's see what targets are available
        echo "Available build targets:"
        ninja -t targets | grep -i mlc || echo "No MLC targets found with grep"
        
        # Try the correct target name (mlc_llm with underscore)
        cmake --build . --target mlc_llm --parallel $(nproc) --verbose || {
          echo "❌ Build with target mlc_llm failed!"
          echo "Trying alternative build approaches..."
          
          # Try building all targets
          cmake --build . --parallel $(nproc) --verbose || {
            echo "❌ Full build failed!"
            echo "Available targets:"
            ninja -t targets | head -20
            echo "Checking for common build artifacts..."
            ls -la . || true
            find . -name "*.so" -o -name "*.a" || true
            exit 1
          }
        }
        
        echo "✅ Build completed successfully!"
        echo "Build artifacts:"
        ls -la .
        find . -name "*.so" -o -name "libmlc*"
        
        # Look for the actual library file (might have different name)
        LIBRARY_FILE=""
        if [ -f "libmlc_llm.so" ]; then
          LIBRARY_FILE="libmlc_llm.so"
        elif [ -f "lib/libmlc_llm.so" ]; then
          LIBRARY_FILE="lib/libmlc_llm.so"  
        elif [ -f "libmlc-llm.so" ]; then
          LIBRARY_FILE="libmlc-llm.so"
        else
          echo "Searching for MLC library files..."
          find . -name "*mlc*.so" -type f
          LIBRARY_FILE=$(find . -name "*mlc*.so" -type f | head -1)
        fi
        
        if [ -n "$LIBRARY_FILE" ] && [ -f "$LIBRARY_FILE" ]; then
          echo "✅ MLC library found: $LIBRARY_FILE"
          file "$LIBRARY_FILE"
          ls -la "$LIBRARY_FILE"
          
          # Copy to standard name for AAR creation
          cp "$LIBRARY_FILE" libmlc-llm.so
          echo "✅ Library copied as libmlc-llm.so"
        else
          echo "❌ No MLC library found!"
          echo "All .so files in build directory:"
          find . -name "*.so" -type f
          exit 1
        fi

    - name: Prepare AAR directory structure
      run: |
        cd mlc-llm
        echo "Preparing AAR directory structure..."
        
        mkdir -p mlc-llm-aar/src/main/jniLibs/arm64-v8a
        
        # Copy the built library
        if [ -f "android_build/libmlc-llm.so" ]; then
          cp android_build/libmlc-llm.so mlc-llm-aar/src/main/jniLibs/arm64-v8a/
          echo "✅ Native library copied successfully"
          
          # Verify the copied library
          echo "Library details:"
          ls -la mlc-llm-aar/src/main/jniLibs/arm64-v8a/
          file mlc-llm-aar/src/main/jniLibs/arm64-v8a/libmlc-llm.so
        else
          echo "❌ libmlc-llm.so not found in android_build!"
          echo "Available files in android_build:"
          find android_build -name "*.so" -o -name "*mlc*" -type f
          exit 1
        fi
        
        echo "AAR directory structure:"
        find mlc-llm-aar -type f

    - name: Create Kotlin wrapper
      run: |
        cd mlc-llm
        mkdir -p mlc-llm-aar/src/main/java/com/gem/app/mlc
        cat > mlc-llm-aar/src/main/java/com/gem/app/mlc/MLCLibrary.kt << 'EOF'
        package com.gem.app.mlc

        /**
         * MLC-LLM Runtime Library for Android
         * Provides native inference capabilities for LLM models
         */
        object MLCLibrary {
            init {
                try {
                    System.loadLibrary("mlc-llm")
                } catch (e: UnsatisfiedLinkError) {
                    throw RuntimeException("Failed to load MLC-LLM native library", e)
                }
            }

            /**
             * Initialize the MLC-LLM runtime with model configuration
             * @param modelPath Path to the model directory
             * @param quantization Quantization type (e.g., "int4", "int8", "fp16")
             * @return Runtime handle for subsequent operations
             */
            external fun initRuntime(modelPath: String, quantization: String): Long

            /**
             * Run inference with the given input
             * @param runtimeHandle Handle returned from initRuntime
             * @param input Input text for inference
             * @return Generated output text
             */
            external fun runInference(runtimeHandle: Long, input: String): String

            /**
             * Release runtime resources
             * @param runtimeHandle Handle to release
             */
            external fun releaseRuntime(runtimeHandle: Long)

            /**
             * Get library version information
             * @return Version string
             */
            external fun getVersion(): String
        }
        EOF

    - name: Create AndroidManifest.xml
      run: |
        cd mlc-llm
        mkdir -p mlc-llm-aar/src/main
        cat > mlc-llm-aar/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.gem.app.mlc">
            
            <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
            <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
            
        </manifest>
        EOF

    - name: Create build.gradle
      run: |
        cd mlc-llm
        cat > mlc-llm-aar/build.gradle << 'EOF'
        plugins {
            id 'com.android.library' version '8.1.4'
            id 'org.jetbrains.kotlin.android' version '1.9.21'
        }

        android {
            namespace 'com.gem.app.mlc'
            compileSdk 34

            defaultConfig {
                minSdk 24
                targetSdk 34
                
                consumerProguardFiles "consumer-rules.pro"
                
                ndk {
                    abiFilters "arm64-v8a"
                }
            }

            sourceSets {
                main {
                    jniLibs.srcDirs = ['src/main/jniLibs']
                }
            }

            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
                debug {
                    minifyEnabled false
                }
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_17
                targetCompatibility JavaVersion.VERSION_17
            }

            kotlinOptions {
                jvmTarget = '17'
            }

            packagingOptions {
                pickFirst '**/libc++_shared.so'
                pickFirst '**/libmlc-llm.so'
            }
            
            // Fix for Android Gradle Plugin compatibility
            buildFeatures {
                buildConfig = true
            }
        }

        dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.9.21'
            implementation 'androidx.core:core-ktx:1.12.0'
        }
        EOF

    - name: Create gradle.properties
      run: |
        cd mlc-llm
        cat > mlc-llm-aar/gradle.properties << 'EOF'
        android.useAndroidX=true
        android.enableJetifier=true
        org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m
        org.gradle.parallel=true
        org.gradle.caching=true
        android.enableR8.fullMode=false
        EOF

    - name: Create settings.gradle
      run: |
        cd mlc-llm
        cat > mlc-llm-aar/settings.gradle << 'EOF'
        pluginManagement {
            repositories {
                gradlePluginPortal()
                google()
                mavenCentral()
            }
        }

        dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
                google()
                mavenCentral()
            }
        }

        rootProject.name = 'mlc-llm-aar'
        EOF

    - name: Create Gradle wrapper
      run: |
        cd mlc-llm/mlc-llm-aar
        echo "Creating Gradle wrapper..."
        
        # Use the system Gradle to create wrapper
        /usr/local/gradle-${{ env.GRADLE_VERSION }}/bin/gradle wrapper --gradle-version ${{ env.GRADLE_VERSION }} || {
          echo "❌ Failed to create Gradle wrapper"
          echo "Available Gradle version:"
          /usr/local/gradle-${{ env.GRADLE_VERSION }}/bin/gradle --version
          exit 1
        }
        
        echo "✅ Gradle wrapper created successfully"
        ls -la gradlew*

    - name: Build AAR with Gradle
      run: |
        cd mlc-llm/mlc-llm-aar
        echo "Building AAR with Gradle..."
        
        # Make gradlew executable
        chmod +x gradlew
        
        # Build with detailed logging
        ./gradlew clean assembleRelease --stacktrace --info --debug || {
          echo "❌ Gradle build failed!"
          echo "Gradle daemon logs:"
          find ~/.gradle -name "*.log" -exec cat {} \; || true
          echo "Build directory contents:"
          find build -type f -name "*.log" -exec cat {} \; || true
          exit 1
        }
        
        echo "✅ AAR build completed successfully!"
        echo "Build outputs:"
        find build/outputs -type f

    - name: Verify AAR build
      run: |
        cd mlc-llm/mlc-llm-aar
        if [ -f "build/outputs/aar/mlc-llm-aar-release.aar" ]; then
          echo "✅ AAR built successfully!"
          ls -la build/outputs/aar/
          unzip -l build/outputs/aar/mlc-llm-aar-release.aar
        else
          echo "❌ AAR build failed!"
          exit 1
        fi

    - name: Upload AAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: mlc-llm-aar-arm64-v8a
        path: |
          mlc-llm/mlc-llm-aar/build/outputs/aar/mlc-llm-aar-release.aar
          mlc-llm/mlc-llm-aar/build/outputs/aar/mlc-llm-aar-debug.aar
        retention-days: 30

    - name: Create release assets
      run: |
        cd mlc-llm/mlc-llm-aar/build/outputs/aar
        sha256sum *.aar > checksums.sha256
        ls -la

    - name: Upload checksums
      uses: actions/upload-artifact@v4
      with:
        name: mlc-llm-aar-checksums
        path: mlc-llm/mlc-llm-aar/build/outputs/aar/checksums.sha256
        retention-days: 30

  test-aar:
    needs: build-aar
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Download AAR artifacts
      uses: actions/download-artifact@v4
      with:
        name: mlc-llm-aar-arm64-v8a
        path: ./artifacts

    - name: Verify AAR structure
      run: |
        cd artifacts
        for aar in *.aar; do
          echo "Checking $aar structure:"
          unzip -l "$aar" | grep -E "(\.so|\.jar|AndroidManifest\.xml|classes\.jar)"
          
          # Extract and verify native library
          unzip -q "$aar" -d temp_extract
          if [ -f "temp_extract/jni/arm64-v8a/libmlc-llm.so" ]; then
            echo "✅ Native library found in $aar"
            file temp_extract/jni/arm64-v8a/libmlc-llm.so
          else
            echo "❌ Native library missing in $aar"
          fi
          rm -rf temp_extract
        done
