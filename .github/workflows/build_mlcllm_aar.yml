#!/bin/bash
# ============================================
# Standalone MLC-LLM AAR Build Script
# Package: com.gem.app.mlc
# Compatible with Ubuntu 20.04, 22.04, and 24.04
# ============================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
ANDROID_NDK_VERSION="r25b"
GRADLE_VERSION="7.6.2"
PACKAGE_NAME="com.gem.app.mlc"

# Print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install system dependencies
install_dependencies() {
    print_status "Installing system dependencies..."
    
    # Enable universe repository
    sudo add-apt-repository universe -y 2>/dev/null || print_warning "Could not add universe repository"
    
    sudo apt-get update -qq
    
    # Install core dependencies
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
        git unzip wget curl cmake build-essential zip \
        zlib1g-dev libstdc++6 locales ninja-build \
        python3 python3-pip pkg-config libssl-dev \
        openjdk-17-jdk || {
        print_error "Failed to install core dependencies"
        exit 1
    }
    
    # Install ncurses with fallback options
    print_status "Installing ncurses libraries..."
    
    # Try different ncurses package combinations
    {
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            libncurses5 libtinfo5 libncurses5-dev
    } || {
        print_warning "libncurses5 not available, trying libncurses6..."
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            libncurses6 libtinfo6 libncurses-dev
    } || {
        print_warning "Standard ncurses packages not available, trying alternatives..."
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            libncursesw5-dev libncursesw6
    }
    
    # Install tinfo dev if available
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
        libtinfo-dev || print_warning "libtinfo-dev not available, continuing..."
    
    print_status "✅ Dependencies installed successfully"
}

# Function to setup Android NDK
setup_ndk() {
    print_status "Setting up Android NDK ${ANDROID_NDK_VERSION}..."
    
    if [ -d "/usr/local/android-ndk" ]; then
        print_status "NDK already exists, skipping download"
        return
    fi
    
    # Download NDK
    NDK_URL="https://dl.google.com/android/repository/android-ndk-${ANDROID_NDK_VERSION}-linux.zip"
    print_status "Downloading NDK from ${NDK_URL}..."
    
    wget -q --show-progress "${NDK_URL}" -O ndk.zip || {
        print_error "Failed to download NDK"
        exit 1
    }
    
    print_status "Extracting NDK..."
    sudo unzip -q ndk.zip -d /usr/local/
    sudo mv "/usr/local/android-ndk-${ANDROID_NDK_VERSION}" /usr/local/android-ndk
    sudo chmod -R 755 /usr/local/android-ndk
    
    # Cleanup
    rm -f ndk.zip
    
    print_status "✅ NDK setup complete"
}

# Function to setup Gradle
setup_gradle() {
    print_status "Setting up Gradle ${GRADLE_VERSION}..."
    
    if [ -d "/usr/local/gradle-${GRADLE_VERSION}" ]; then
        print_status "Gradle already exists, skipping download"
        return
    fi
    
    # Download Gradle
    GRADLE_URL="https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip"
    print_status "Downloading Gradle from ${GRADLE_URL}..."
    
    wget -q --show-progress "${GRADLE_URL}" -O gradle.zip || {
        print_error "Failed to download Gradle"
        exit 1
    }
    
    print_status "Extracting Gradle..."
    sudo unzip -q gradle.zip -d /usr/local/
    sudo chmod -R 755 "/usr/local/gradle-${GRADLE_VERSION}"
    
    # Cleanup
    rm -f gradle.zip
    
    print_status "✅ Gradle setup complete"
}

# Function to set environment variables
setup_environment() {
    print_status "Setting up environment variables..."
    
    export ANDROID_NDK_ROOT="/usr/local/android-ndk"
    export ANDROID_SDK_ROOT="/usr/local/android-sdk"
    export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
    export PATH="${PATH}:/usr/local/android-ndk:/usr/local/gradle-${GRADLE_VERSION}/bin"
    
    # Verify environment
    print_status "Environment verification:"
    echo "JAVA_HOME: ${JAVA_HOME}"
    echo "NDK ROOT: ${ANDROID_NDK_ROOT}"
    
    if [ ! -d "${ANDROID_NDK_ROOT}" ]; then
        print_error "Android NDK not found at ${ANDROID_NDK_ROOT}"
        exit 1
    fi
    
    if [ ! -f "${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake" ]; then
        print_error "Android toolchain file not found"
        exit 1
    fi
    
    # Create Android SDK directory
    sudo mkdir -p /usr/local/android-sdk
    
    print_status "✅ Environment setup complete"
}

# Function to clone MLC-LLM repository
clone_mlc_repo() {
    print_status "Cloning MLC-LLM repository..."
    
    if [ -d "mlc-llm" ]; then
        print_status "MLC-LLM directory exists, updating..."
        cd mlc-llm
        git pull || print_warning "Could not update repository"
        git submodule update --init --recursive || print_warning "Could not update submodules"
        cd ..
    else
        git clone --depth 1 --recursive https://github.com/mlc-ai/mlc-llm.git || {
            print_error "Failed to clone MLC-LLM repository"
            exit 1
        }
    fi
    
    if [ ! -f "mlc-llm/CMakeLists.txt" ]; then
        print_error "CMakeLists.txt not found in MLC-LLM repository"
        exit 1
    fi
    
    print_status "✅ Repository setup complete"
}

# Function to build native library
build_native_library() {
    print_status "Building MLC-LLM native library for arm64-v8a..."
    
    cd mlc-llm
    
    # Create build directory
    rm -rf android_build
    mkdir -p android_build
    cd android_build
    
    # Configure CMake
    print_status "Configuring CMake..."
    cmake .. \
        -DCMAKE_TOOLCHAIN_FILE="${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake" \
        -DANDROID_ABI=arm64-v8a \
        -DANDROID_PLATFORM=android-29 \
        -DCMAKE_BUILD_TYPE=Release \
        -DBUILD_SHARED_LIBS=ON \
        -DMLC_ENABLE_INT4=ON \
        -DMLC_ENABLE_INT8=ON \
        -DMLC_ENABLE_NF4=ON \
        -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=BOTH \
        -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=BOTH \
        -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=BOTH \
        -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
        -GNinja || {
        print_error "CMake configuration failed"
        exit 1
    }
    
    # Build
    print_status "Building native library..."
    cmake --build . --target mlc-llm --parallel $(nproc) || {
        print_error "Build failed"
        exit 1
    }
    
    # Verify build output
    if [ ! -f "libmlc-llm.so" ]; then
        print_error "libmlc-llm.so was not created"
        find . -name "*mlc*" -type f
        exit 1
    fi
    
    print_status "✅ Native library built successfully"
    file libmlc-llm.so
    
    cd ../..
}

# Function to create AAR structure
create_aar_structure() {
    print_status "Creating AAR structure..."
    
    cd mlc-llm
    
    # Clean and create AAR directory structure
    rm -rf mlc-llm-aar
    mkdir -p mlc-llm-aar/src/main/jniLibs/arm64-v8a
    mkdir -p mlc-llm-aar/src/main/java/com/gem/app/mlc
    
    # Copy native library
    cp android_build/libmlc-llm.so mlc-llm-aar/src/main/jniLibs/arm64-v8a/ || {
        print_error "Failed to copy native library"
        exit 1
    }
    
    # Create Kotlin wrapper
    print_status "Creating Kotlin wrapper..."
    cat > mlc-llm-aar/src/main/java/com/gem/app/mlc/MLCLibrary.kt << 'EOF'
package com.gem.app.mlc

/**
 * MLC-LLM Runtime Library for Android
 * Provides native inference capabilities for LLM models
 */
object MLCLibrary {
    init {
        try {
            System.loadLibrary("mlc-llm")
        } catch (e: UnsatisfiedLinkError) {
            throw RuntimeException("Failed to load MLC-LLM native library", e)
        }
    }

    /**
     * Initialize the MLC-LLM runtime with model configuration
     * @param modelPath Path to the model directory
     * @param quantization Quantization type (e.g., "int4", "int8", "fp16")
     * @return Runtime handle for subsequent operations
     */
    external fun initRuntime(modelPath: String, quantization: String): Long

    /**
     * Run inference with the given input
     * @param runtimeHandle Handle returned from initRuntime
     * @param input Input text for inference
     * @return Generated output text
     */
    external fun runInference(runtimeHandle: Long, input: String): String

    /**
     * Release runtime resources
     * @param runtimeHandle Handle to release
     */
    external fun releaseRuntime(runtimeHandle: Long)

    /**
     * Get library version information
     * @return Version string
     */
    external fun getVersion(): String
}
EOF
    
    # Create AndroidManifest.xml
    print_status "Creating AndroidManifest.xml..."
    cat > mlc-llm-aar/src/main/AndroidManifest.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.gem.app.mlc">
    
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    
</manifest>
EOF
    
    print_status "✅ AAR structure created successfully"
    cd ..
}

# Function to create Gradle build files
create_gradle_files() {
    print_status "Creating Gradle build files..."
    
    cd mlc-llm/mlc-llm-aar
    
    # Create build.gradle
    cat > build.gradle << 'EOF'
plugins {
    id 'com.android.library' version '8.1.4'
    id 'org.jetbrains.kotlin.android' version '1.9.21'
}

android {
    namespace 'com.gem.app.mlc'
    compileSdk 34

    defaultConfig {
        minSdk 24
        targetSdk 34
        
        ndk {
            abiFilters "arm64-v8a"
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libmlc-llm.so'
    }
    
    buildFeatures {
        buildConfig = true
    }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.9.21'
    implementation 'androidx.core:core-ktx:1.12.0'
}
EOF
    
    # Create settings.gradle
    cat > settings.gradle << 'EOF'
pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = 'mlc-llm-aar'
EOF
    
    # Create gradle.properties
    cat > gradle.properties << 'EOF'
android.useAndroidX=true
android.enableJetifier=true
org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m
org.gradle.parallel=true
org.gradle.caching=true
android.enableR8.fullMode=false
EOF
    
    print_status "✅ Gradle build files created successfully"
    cd ../..
}

# Function to build AAR
build_aar() {
    print_status "Building AAR with Gradle..."
    
    cd mlc-llm/mlc-llm-aar
    
    # Create Gradle wrapper
    /usr/local/gradle-${GRADLE_VERSION}/bin/gradle wrapper --gradle-version ${GRADLE_VERSION} || {
        print_error "Failed to create Gradle wrapper"
        exit 1
    }
    
    # Make wrapper executable
    chmod +x gradlew
    
    # Build AAR
    ./gradlew clean assembleRelease --stacktrace || {
        print_error "AAR build failed"
        exit 1
    }
    
    # Verify AAR was created
    if [ -f "build/outputs/aar/mlc-llm-aar-release.aar" ]; then
        print_status "✅ AAR built successfully!"
        ls -la build/outputs/aar/
        
        # Show AAR contents
        print_status "AAR contents:"
        unzip -l build/outputs/aar/mlc-llm-aar-release.aar
        
        # Create checksums
        cd build/outputs/aar
        sha256sum *.aar > checksums.sha256
        print_status "Checksums created:"
        cat checksums.sha256
        
    else
        print_error "AAR file was not created"
        exit 1
    fi
    
    cd ../../..
}

# Function to show final results
show_results() {
    print_status "=== Build Complete ==="
    echo ""
    print_status "📦 AAR Location: mlc-llm/mlc-llm-aar/build/outputs/aar/mlc-llm-aar-release.aar"
    print_status "📋 Package: ${PACKAGE_NAME}"
    print_status "🏗️  Architecture: arm64-v8a"
    print_status "🔧 Build Type: Release"
    echo ""
    print_status "Integration in Android project:"
    echo "1. Copy the AAR file to your Android project's libs/ directory"
    echo "2. Add to your app's build.gradle:"
    echo "   implementation files('libs/mlc-llm-aar-release.aar')"
    echo "3. Use the MLCLibrary object in your Kotlin/Java code"
    echo ""
    print_status "✅ Build completed successfully!"
}

# Main execution
main() {
    print_status "Starting MLC-LLM AAR build process..."
    
    # Check if running as root
    if [ "$EUID" -eq 0 ]; then
        print_error "Please do not run this script as root"
        exit 1
    fi
    
    # Check for required commands
    if ! command_exists sudo; then
        print_error "sudo is required but not installed"
        exit 1
    fi
    
    if ! command_exists git; then
        print_error "git is required but not installed"
        exit 1
    fi
    
    # Execute build steps
    install_dependencies
    setup_ndk
    setup_gradle
    setup_environment
    clone_mlc_repo
    build_native_library
    create_aar_structure
    create_gradle_files
    build_aar
    show_results
}

# Run main function
main "$@"
