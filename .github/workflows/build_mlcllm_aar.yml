name: Build MLC-LLM Android Library with Quantization Support

on:
  workflow_dispatch:
    inputs:
      android_abi:
        description: 'Android ABI (arm64-v8a, armeabi-v7a, x86_64)'
        required: false
        default: 'arm64-v8a'
      models_to_include:
        description: 'Comma-separated list of models to include'
        required: false
        default: 'HF://mlc-ai/gemma-2b-it-q4f16_1-MLC'

env:
  # Build configurations
  ANDROID_ABI: ${{ github.event.inputs.android_abi || 'arm64-v8a' }}
  NDK_VERSION: '27.0.11718014'
  JAVA_VERSION: '17'
  PYTHON_VERSION: '3.10'
  
  # Quantization flags
  MLC_ENABLE_INT4: 'ON'
  MLC_ENABLE_INT8: 'ON' 
  MLC_ENABLE_NF4: 'ON'
  
  # Package configuration
  PACKAGE_NAME: 'com.gem.app.mlc'

jobs:
  build-mlc-llm-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: aarch64-linux-android
        override: true
        
    - name: Setup Android NDK
      id: setup-ndk
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: ${{ env.NDK_VERSION }}
        add-to-path: false
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          git \
          git-lfs \
          zstd \
          libtinfo-dev \
          pkg-config \
          libssl-dev
          
    - name: Setup Python environment and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install conda-forge-pinning
        pip install \
          torch \
          transformers \
          tokenizers \
          huggingface-hub \
          numpy \
          packaging \
          psutil \
          scipy \
          tqdm \
          cloudpickle \
          decorator \
          synr \
          tornado \
          typing_extensions
          
    - name: Clone MLC-LLM repository
      run: |
        git clone --recursive https://github.com/mlc-ai/mlc-llm.git
        cd mlc-llm
        git submodule update --init --recursive
        
    - name: Setup environment variables
      run: |
        echo "ANDROID_NDK=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
        echo "TVM_NDK_CC=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang" >> $GITHUB_ENV
        echo "JAVA_HOME=${{ env.JAVA_HOME }}" >> $GITHUB_ENV
        echo "TVM_SOURCE_DIR=${{ github.workspace }}/mlc-llm/3rdparty/tvm" >> $GITHUB_ENV
        echo "MLC_LLM_SOURCE_DIR=${{ github.workspace }}/mlc-llm" >> $GITHUB_ENV
        
        # Add Rust Android target
        rustup target add aarch64-linux-android
        
    - name: Install MLC-LLM Python package
      run: |
        cd mlc-llm
        pip install --verbose -e .
        
    - name: Create custom package configuration
      run: |
        cd mlc-llm/android/MLCChat
        cat > mlc-package-config.json << EOF
        {
          "device": "android",
          "model_list": [
            {
              "model": "${{ github.event.inputs.models_to_include || 'HF://mlc-ai/gemma-2b-it-q4f16_1-MLC' }}",
              "model_id": "gemma-2b-q4f16_1-MLC", 
              "estimated_vram_bytes": 3000000000,
              "bundle_weight": false,
              "overrides": {
                "context_window_size": 2048,
                "prefill_chunk_size": 512
              }
            }
          ]
        }
        EOF
        
    - name: Build runtime and model libraries
      run: |
        cd mlc-llm/android/MLCChat
        export CMAKE_ARGS="-DMLC_ENABLE_INT4=${{ env.MLC_ENABLE_INT4 }} -DMLC_ENABLE_INT8=${{ env.MLC_ENABLE_INT8 }} -DMLC_ENABLE_NF4=${{ env.MLC_ENABLE_NF4 }}"
        mlc_llm package
        
    - name: Customize package name in AndroidManifest
      run: |
        cd mlc-llm/android/MLCChat/dist/lib/mlc4j/src/main
        sed -i 's/package="[^"]*"/package="${{ env.PACKAGE_NAME }}"/g' AndroidManifest.xml
        
        # Update Java package structure
        mkdir -p java/com/gem/app/mlc
        if [ -d "java/ai/mlc" ]; then
          mv java/ai/mlc/* java/com/gem/app/mlc/
          rm -rf java/ai
        fi
        
        # Update package declarations in Java files
        find java -name "*.java" -exec sed -i 's/package ai\.mlc/package com.gem.app.mlc/g' {} \;
        find java -name "*.java" -exec sed -i 's/import ai\.mlc/import com.gem.app.mlc/g' {} \;
        
    - name: Create AAR build configuration
      run: |
        cd mlc-llm/android/MLCChat/dist/lib/mlc4j
        cat > build.gradle << 'EOF'
        plugins {
            id 'com.android.library'
        }

        android {
            namespace '${{ env.PACKAGE_NAME }}'
            compileSdk 34

            defaultConfig {
                minSdk 24
                targetSdk 34
                consumerProguardFiles "consumer-rules.pro"
                
                ndk {
                    abiFilters "${{ env.ANDROID_ABI }}"
                }
            }

            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
            
            buildFeatures {
                buildConfig true
            }
            
            sourceSets {
                main {
                    java.srcDirs = ['src/main/java']
                    jniLibs.srcDirs = ['output']
                    assets.srcDirs = ['src/main/assets']
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                }
            }
        }

        dependencies {
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'com.google.android.material:material:1.11.0'
        }
        EOF
        
    - name: Create Gradle wrapper and settings
      run: |
        cd mlc-llm/android/MLCChat/dist/lib/mlc4j
        
        # Create settings.gradle
        echo "rootProject.name = 'mlc4j'" > settings.gradle
        
        # Create gradle.properties
        cat > gradle.properties << EOF
        android.useAndroidX=true
        android.enableJetifier=true
        org.gradle.jvmargs=-Xmx2048m
        EOF
        
        # Create consumer-rules.pro
        touch consumer-rules.pro
        
        # Create proguard-rules.pro
        cat > proguard-rules.pro << EOF
        # Keep MLC-LLM classes
        -keep class ${{ env.PACKAGE_NAME }}.** { *; }
        -keep class org.apache.tvm.** { *; }
        -keepclassmembers class * {
            @org.apache.tvm.annotation.* *;
        }
        EOF
        
    - name: Setup Gradle Wrapper
      run: |
        cd mlc-llm/android/MLCChat/dist/lib/mlc4j
        gradle wrapper --gradle-version 8.5
        chmod +x gradlew
        
    - name: Build AAR
      run: |
        cd mlc-llm/android/MLCChat/dist/lib/mlc4j
        ./gradlew assembleRelease
        
    - name: Verify build output
      run: |
        cd mlc-llm/android/MLCChat/dist/lib/mlc4j
        echo "=== Build Output Structure ==="
        find . -name "*.aar" -o -name "*.so" -o -name "*.jar" | head -20
        
        echo "=== AAR Contents ==="
        if [ -f "build/outputs/aar/mlc4j-release.aar" ]; then
          unzip -l build/outputs/aar/mlc4j-release.aar
        fi
        
        echo "=== Quantization Support Verification ==="
        if [ -f "output/${{ env.ANDROID_ABI }}/libtvm4j_runtime_packed.so" ]; then
          echo "âœ“ Native library found for ${{ env.ANDROID_ABI }}"
          strings "output/${{ env.ANDROID_ABI }}/libtvm4j_runtime_packed.so" | grep -i "quantiz" || echo "String search completed"
        fi
        
    - name: Create integration documentation
      run: |
        cd mlc-llm/android/MLCChat/dist/lib/mlc4j
        cat > INTEGRATION_GUIDE.md << 'EOF'
        # MLC-LLM Android Integration Guide

        ## Package Information
        - **Package Name**: ${{ env.PACKAGE_NAME }}
        - **Quantization Support**: INT4, INT8, NF4
        - **Target ABI**: ${{ env.ANDROID_ABI }}

        ## Integration Steps

        ### 1. Add to your Android project
        
        Copy the `mlc4j-release.aar` to your `app/libs/` directory.
        
        In your app's `build.gradle`:
        ```
        dependencies {
            implementation files('libs/mlc4j-release.aar')
        }
        ```

        ### 2. Initialize MLC-LLM in your app

        ```
        import ${{ env.PACKAGE_NAME }}.MLCEngine;
        import ${{ env.PACKAGE_NAME }}.MLCEngineConfig;

        // Initialize the engine
        MLCEngineConfig config = new MLCEngineConfig();
        config.setModelPath("/path/to/your/mlc/model");
        config.setDeviceType("android_gpu");
        
        MLCEngine engine = new MLCEngine(config);
        ```

        ### 3. Model Format Requirements
        - Models must be in MLC format
        - Supported quantizations: q4f16_1 (INT4), q8f16_1 (INT8), q4f16_nf4 (NF4)
        - Use `mlc_llm convert_weight` to convert HuggingFace models

        ### 4. Permissions
        Add to your AndroidManifest.xml:
        ```
        <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
        <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
        ```

        ## Quantization Support
        This build includes:
        - INT4 quantization support (MLC_ENABLE_INT4=ON)
        - INT8 quantization support (MLC_ENABLE_INT8=ON) 
        - NF4 quantization support (MLC_ENABLE_NF4=ON)
        EOF
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mlc-llm-android-library-${{ env.ANDROID_ABI }}
        path: |
          mlc-llm/android/MLCChat/dist/lib/mlc4j/build/outputs/aar/*.aar
          mlc-llm/android/MLCChat/dist/lib/mlc4j/output/**/*.so
          mlc-llm/android/MLCChat/dist/lib/mlc4j/tvm4j_core.jar
          mlc-llm/android/MLCChat/dist/lib/mlc4j/INTEGRATION_GUIDE.md
          mlc-llm/android/MLCChat/dist/lib/mlc4j/build.gradle
          mlc-llm/android/MLCChat/dist/lib/mlc4j/src/main/AndroidManifest.xml
        retention-days: 30
        
    - name: Create release summary
      run: |
        echo "## ðŸŽ‰ MLC-LLM Android Build Completed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Package Name**: \`${{ env.PACKAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Android ABI**: \`${{ env.ANDROID_ABI }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Quantization Support**: INT4, INT8, NF4" >> $GITHUB_STEP_SUMMARY
        echo "- **NDK Version**: \`${{ env.NDK_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts Generated" >> $GITHUB_STEP_SUMMARY
        echo "- \`mlc4j-release.aar\` - Main Android library" >> $GITHUB_STEP_SUMMARY
        echo "- \`libtvm4j_runtime_packed.so\` - Native runtime library" >> $GITHUB_STEP_SUMMARY
        echo "- \`tvm4j_core.jar\` - Java bindings" >> $GITHUB_STEP_SUMMARY
        echo "- \`INTEGRATION_GUIDE.md\` - Integration instructions" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the artifacts from this workflow run" >> $GITHUB_STEP_SUMMARY
        echo "2. Follow the integration guide to add the AAR to your Android project" >> $GITHUB_STEP_SUMMARY
        echo "3. Convert your models to MLC format with desired quantization" >> $GITHUB_STEP_SUMMARY
        echo "4. Deploy and run LLMs locally on Android devices!" >> $GITHUB_STEP_SUMMARY
